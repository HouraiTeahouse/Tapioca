syntax = "proto3";

package tapioca;

option go_package = "pkg/proto";

message TargetSet {
  repeated Target targets = 1;
}

// Values are 16-bit integers:
//    Top byte is an identifier for a family of targets.
//    Bottom byte is a specific target type within that family.
//    Supports 256 targets within a target family.
enum Target {
  Any = 0;
  // Windows family ID: 0x0100
  Windows_x64 = 0x0101;
  Windows_x86 = 0x0102;
  Windows_AppStore = 0x0103;
  // MacOS family ID: 0x0100
  MacOS_Universal = 0x0201;
  // Linux family ID: 0x0300
  Linux_Universal = 0x0301;
  Linux_x64 = 0x0302;
  // Apple platform family ID: 0x0400
  Apple_iOS = 0x0401;
  Apple_tvOS = 0x0402;
  // Android family ID: 0x0500
  Andooid = 0x0501;
  // WebGL family ID: 0x0600
  WebGL = 0x0601;
  // Sony Console family ID: 0x0700
  PS4 = 0x0701;
  PS_Vita = 0x0702;
  // Microsoft console family ID: 0x0800
  XboxOne = 0x0801;
  // Nintendo console family ID: 0x0900
  Nintendo_Switch = 0x0901;
  Nintendo_3DS = 0x0902;
}

message ManifestProto {
  repeated ManifestBlockProto blocks = 1;
  map<string, ManifestItemProto> items = 2;
  ManifestMetadataProto metadata = 3;
}

message ManifestMetadataProto {
  // The targets the build is valid on.
  repeated Target targets = 1;
  // Required: the maximum size of blocks within the build in bytes.
  uint64 max_block_size = 2;
}

// A manifest descriptor for a block within a build
message ManifestBlockProto {
  // The hash of the block
  bytes hash = 1;
  // Optional: The size of the block. Only present when the size of the block is
  // not the max_block_size of the manifest.
  uint64 size = 2;
}

// A manifest descriptor for a item (a file or directory) within a build
message ManifestItemProto {
  // File only. The sequence of block ranges that consitute the file.
  repeated ManifestBlockRange blocks = 1;
  // Directory only. All child nodes within the directory.
  map<string, ManifestItemProto> children = 2;
}

message ManifestBlockRange {
  // The first block in the range. This is the index of the first block in the
  // range.
  uint64 start_id = 1;
  // The number of blocks in the range.
  uint64 size = 2;
}

message ManifestDiffProto {
  repeated ManifestBlockProto blocks = 1;
  map<string, FileDiffProto> changed_files = 2;
  ManifestMetadataProto metadata = 3;
}

message FileDiffProto {
  // Key: the block offset in the file.
  // Value: the block id in the manifest diff that corresponds to the changed
  // block.
  map<uint64, uint64> changed_blocks = 1;
}
