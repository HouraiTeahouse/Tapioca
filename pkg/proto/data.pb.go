// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/proto/data.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProjectConfig struct {
	Id            *uint32                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DefaultBranch *uint32                  `protobuf:"varint,2,opt,name=default_branch,json=defaultBranch" json:"default_branch,omitempty"`
	Branches      map[uint32]*BranchConfig `protobuf:"bytes,3,rep,name=branches" json:"branches,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Required: Platform specific launch options. Map keys are Platform values.
	// These values are overriden by branch specific options if they are present.
	LaunchOptions           map[uint32]*LaunchOptions `protobuf:"bytes,4,rep,name=launch_options,json=launchOptions" json:"launch_options,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GarbageCollectionPolicy *GarbageCollectionPolicy  `protobuf:"bytes,5,opt,name=garbage_collection_policy,json=garbageCollectionPolicy" json:"garbage_collection_policy,omitempty"`
	// Required: the URL prefix to download objects from.
	BlockStoragePrefix   *string  `protobuf:"bytes,6,opt,name=block_storage_prefix,json=blockStoragePrefix" json:"block_storage_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectConfig) Reset()         { *m = ProjectConfig{} }
func (m *ProjectConfig) String() string { return proto.CompactTextString(m) }
func (*ProjectConfig) ProtoMessage()    {}
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{0}
}

func (m *ProjectConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectConfig.Unmarshal(m, b)
}
func (m *ProjectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectConfig.Marshal(b, m, deterministic)
}
func (m *ProjectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectConfig.Merge(m, src)
}
func (m *ProjectConfig) XXX_Size() int {
	return xxx_messageInfo_ProjectConfig.Size(m)
}
func (m *ProjectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectConfig proto.InternalMessageInfo

func (m *ProjectConfig) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ProjectConfig) GetDefaultBranch() uint32 {
	if m != nil && m.DefaultBranch != nil {
		return *m.DefaultBranch
	}
	return 0
}

func (m *ProjectConfig) GetBranches() map[uint32]*BranchConfig {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *ProjectConfig) GetLaunchOptions() map[uint32]*LaunchOptions {
	if m != nil {
		return m.LaunchOptions
	}
	return nil
}

func (m *ProjectConfig) GetGarbageCollectionPolicy() *GarbageCollectionPolicy {
	if m != nil {
		return m.GarbageCollectionPolicy
	}
	return nil
}

func (m *ProjectConfig) GetBlockStoragePrefix() string {
	if m != nil && m.BlockStoragePrefix != nil {
		return *m.BlockStoragePrefix
	}
	return ""
}

// Determines the build purge policy of a project.
//
// Purged builds do not have their data deleted, but will have the refrence
// originating from the build deleted.
type GarbageCollectionPolicy struct {
	// Builds older than a given retention duration will be purged.
	//
	// If unset, builds are indefinitely until manually purged.
	//
	// Exception: At least one build per branch/target combination will be
	// retained of what this is set to.
	RetentionDuration *duration.Duration `protobuf:"bytes,1,opt,name=retention_duration,json=retentionDuration" json:"retention_duration,omitempty"`
	// The number of builds to retain per branch/target combionation. As new
	// builds are pushed.
	//
	// If not set, the value is assumed to be 1.
	RetainedBuilds       *uint64  `protobuf:"varint,2,opt,name=retained_builds,json=retainedBuilds" json:"retained_builds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GarbageCollectionPolicy) Reset()         { *m = GarbageCollectionPolicy{} }
func (m *GarbageCollectionPolicy) String() string { return proto.CompactTextString(m) }
func (*GarbageCollectionPolicy) ProtoMessage()    {}
func (*GarbageCollectionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{1}
}

func (m *GarbageCollectionPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GarbageCollectionPolicy.Unmarshal(m, b)
}
func (m *GarbageCollectionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GarbageCollectionPolicy.Marshal(b, m, deterministic)
}
func (m *GarbageCollectionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GarbageCollectionPolicy.Merge(m, src)
}
func (m *GarbageCollectionPolicy) XXX_Size() int {
	return xxx_messageInfo_GarbageCollectionPolicy.Size(m)
}
func (m *GarbageCollectionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GarbageCollectionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GarbageCollectionPolicy proto.InternalMessageInfo

func (m *GarbageCollectionPolicy) GetRetentionDuration() *duration.Duration {
	if m != nil {
		return m.RetentionDuration
	}
	return nil
}

func (m *GarbageCollectionPolicy) GetRetainedBuilds() uint64 {
	if m != nil && m.RetainedBuilds != nil {
		return *m.RetainedBuilds
	}
	return 0
}

type LaunchOptions struct {
	// The path of game executable that is to be launched, relative to the root
	// directory of the build.
	//
	// Note: path is seperated by '/' path seperator.
	Executable *string `protobuf:"bytes,1,opt,name=executable" json:"executable,omitempty"`
	// The additional command line flags used when launching on a platform.
	LaunchFlags          []string `protobuf:"bytes,2,rep,name=launch_flags,json=launchFlags" json:"launch_flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaunchOptions) Reset()         { *m = LaunchOptions{} }
func (m *LaunchOptions) String() string { return proto.CompactTextString(m) }
func (*LaunchOptions) ProtoMessage()    {}
func (*LaunchOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{2}
}

func (m *LaunchOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchOptions.Unmarshal(m, b)
}
func (m *LaunchOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchOptions.Marshal(b, m, deterministic)
}
func (m *LaunchOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchOptions.Merge(m, src)
}
func (m *LaunchOptions) XXX_Size() int {
	return xxx_messageInfo_LaunchOptions.Size(m)
}
func (m *LaunchOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchOptions proto.InternalMessageInfo

func (m *LaunchOptions) GetExecutable() string {
	if m != nil && m.Executable != nil {
		return *m.Executable
	}
	return ""
}

func (m *LaunchOptions) GetLaunchFlags() []string {
	if m != nil {
		return m.LaunchFlags
	}
	return nil
}

// ID: 8 bytes:
//     {4-byte Project ID} +
//     {4-byte branch name fingerprint}
type BranchConfig struct {
	ProjectId *uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Id        *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// Source control branch name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Optional: Human facing display name for the branch
	DisplayName *string `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Optional: Platform specific launch options. Map keys are Platform values.
	// Overrides project wide launch options when provided.
	LaunchOptions        map[uint32]*LaunchOptions `protobuf:"bytes,5,rep,name=launch_options,json=launchOptions" json:"launch_options,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *BranchConfig) Reset()         { *m = BranchConfig{} }
func (m *BranchConfig) String() string { return proto.CompactTextString(m) }
func (*BranchConfig) ProtoMessage()    {}
func (*BranchConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{3}
}

func (m *BranchConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BranchConfig.Unmarshal(m, b)
}
func (m *BranchConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BranchConfig.Marshal(b, m, deterministic)
}
func (m *BranchConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BranchConfig.Merge(m, src)
}
func (m *BranchConfig) XXX_Size() int {
	return xxx_messageInfo_BranchConfig.Size(m)
}
func (m *BranchConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BranchConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BranchConfig proto.InternalMessageInfo

func (m *BranchConfig) GetProjectId() uint32 {
	if m != nil && m.ProjectId != nil {
		return *m.ProjectId
	}
	return 0
}

func (m *BranchConfig) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BranchConfig) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BranchConfig) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *BranchConfig) GetLaunchOptions() map[uint32]*LaunchOptions {
	if m != nil {
		return m.LaunchOptions
	}
	return nil
}

type BuildProto struct {
	// ID: 14 bytes:
	//     {8-byte Branch ID} +
	//     {4-byte truncated SHA-1 of commit}
	//     {2-byte target} +
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The build manifest
	Manifest *ManifestProto       `protobuf:"bytes,2,opt,name=manifest" json:"manifest,omitempty"`
	Metadata *BuildProto_Metadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	// Information on how to launch the build.
	LaunchOptions        *LaunchOptions `protobuf:"bytes,4,opt,name=launch_options,json=launchOptions" json:"launch_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BuildProto) Reset()         { *m = BuildProto{} }
func (m *BuildProto) String() string { return proto.CompactTextString(m) }
func (*BuildProto) ProtoMessage()    {}
func (*BuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{4}
}

func (m *BuildProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildProto.Unmarshal(m, b)
}
func (m *BuildProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildProto.Marshal(b, m, deterministic)
}
func (m *BuildProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProto.Merge(m, src)
}
func (m *BuildProto) XXX_Size() int {
	return xxx_messageInfo_BuildProto.Size(m)
}
func (m *BuildProto) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProto.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProto proto.InternalMessageInfo

func (m *BuildProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BuildProto) GetManifest() *ManifestProto {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *BuildProto) GetMetadata() *BuildProto_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *BuildProto) GetLaunchOptions() *LaunchOptions {
	if m != nil {
		return m.LaunchOptions
	}
	return nil
}

type BuildProto_Metadata struct {
	// Required: The source control commit hash.
	SourceCommit []byte `protobuf:"bytes,1,opt,name=source_commit,json=sourceCommit" json:"source_commit,omitempty"`
	// Reqired: The timestamp the build was created at.
	BuildTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=build_timestamp,json=buildTimestamp" json:"build_timestamp,omitempty"`
	// Required: The target platform for the build
	Target               *Target  `protobuf:"varint,3,opt,name=target,enum=tapioca.Target" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildProto_Metadata) Reset()         { *m = BuildProto_Metadata{} }
func (m *BuildProto_Metadata) String() string { return proto.CompactTextString(m) }
func (*BuildProto_Metadata) ProtoMessage()    {}
func (*BuildProto_Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{4, 0}
}

func (m *BuildProto_Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildProto_Metadata.Unmarshal(m, b)
}
func (m *BuildProto_Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildProto_Metadata.Marshal(b, m, deterministic)
}
func (m *BuildProto_Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildProto_Metadata.Merge(m, src)
}
func (m *BuildProto_Metadata) XXX_Size() int {
	return xxx_messageInfo_BuildProto_Metadata.Size(m)
}
func (m *BuildProto_Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildProto_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_BuildProto_Metadata proto.InternalMessageInfo

func (m *BuildProto_Metadata) GetSourceCommit() []byte {
	if m != nil {
		return m.SourceCommit
	}
	return nil
}

func (m *BuildProto_Metadata) GetBuildTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.BuildTimestamp
	}
	return nil
}

func (m *BuildProto_Metadata) GetTarget() Target {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return Target_Windows_x64
}

// ID: 78 bytes:
//     {64-byte block SHA-512} +
//     {14-byte block build hash}
type BlockInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4eee4d5b7550609, []int{5}
}

func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockInfo.Unmarshal(m, b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return xxx_messageInfo_BlockInfo.Size(m)
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProjectConfig)(nil), "tapioca.ProjectConfig")
	proto.RegisterMapType((map[uint32]*BranchConfig)(nil), "tapioca.ProjectConfig.BranchesEntry")
	proto.RegisterMapType((map[uint32]*LaunchOptions)(nil), "tapioca.ProjectConfig.LaunchOptionsEntry")
	proto.RegisterType((*GarbageCollectionPolicy)(nil), "tapioca.GarbageCollectionPolicy")
	proto.RegisterType((*LaunchOptions)(nil), "tapioca.LaunchOptions")
	proto.RegisterType((*BranchConfig)(nil), "tapioca.BranchConfig")
	proto.RegisterMapType((map[uint32]*LaunchOptions)(nil), "tapioca.BranchConfig.LaunchOptionsEntry")
	proto.RegisterType((*BuildProto)(nil), "tapioca.BuildProto")
	proto.RegisterType((*BuildProto_Metadata)(nil), "tapioca.BuildProto.Metadata")
	proto.RegisterType((*BlockInfo)(nil), "tapioca.BlockInfo")
}

func init() { proto.RegisterFile("pkg/proto/data.proto", fileDescriptor_e4eee4d5b7550609) }

var fileDescriptor_e4eee4d5b7550609 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x55, 0x7e, 0xda, 0x2f, 0x19, 0x27, 0xe9, 0xc7, 0xaa, 0x50, 0x37, 0x82, 0x12, 0x02, 0xa8,
	0x41, 0x20, 0x17, 0xe5, 0xaa, 0x42, 0x42, 0x42, 0x09, 0x7f, 0x95, 0x28, 0x8d, 0x96, 0x5e, 0x20,
	0x84, 0x64, 0x6d, 0xec, 0x8d, 0x6b, 0xea, 0x78, 0x2d, 0x7b, 0x8d, 0x9a, 0x77, 0xe0, 0x01, 0xb8,
	0x41, 0x3c, 0x1f, 0x6f, 0x81, 0x3c, 0xbb, 0xd9, 0x26, 0x4d, 0x0a, 0x57, 0xdc, 0xad, 0xcf, 0x39,
	0x73, 0x66, 0x67, 0x3c, 0x3b, 0xb0, 0x9d, 0x9c, 0x07, 0x07, 0x49, 0x2a, 0xa4, 0x38, 0xf0, 0x99,
	0x64, 0x0e, 0x1e, 0xc9, 0x7f, 0x92, 0x25, 0xa1, 0xf0, 0x58, 0x7b, 0x2f, 0x10, 0x22, 0x88, 0xb8,
	0x52, 0x8c, 0xf3, 0xc9, 0x81, 0x9f, 0xa7, 0x4c, 0x86, 0x22, 0x56, 0xc2, 0xf6, 0xdd, 0xab, 0xbc,
	0x0c, 0xa7, 0x3c, 0x93, 0x6c, 0x9a, 0x68, 0x81, 0x7d, 0xe9, 0x3f, 0x65, 0x71, 0x38, 0xe1, 0x99,
	0x54, 0x4c, 0xf7, 0x7b, 0x15, 0x9a, 0xa3, 0x54, 0x7c, 0xe1, 0x9e, 0x1c, 0x8a, 0x78, 0x12, 0x06,
	0xa4, 0x05, 0xe5, 0xd0, 0xb7, 0x4b, 0x9d, 0x52, 0xaf, 0x49, 0xcb, 0xa1, 0x4f, 0x1e, 0x42, 0xcb,
	0xe7, 0x13, 0x96, 0x47, 0xd2, 0x1d, 0xa7, 0x2c, 0xf6, 0xce, 0xec, 0x32, 0x72, 0x4d, 0x8d, 0x0e,
	0x10, 0x24, 0x2f, 0xa0, 0xa6, 0x68, 0x9e, 0xd9, 0x95, 0x4e, 0xa5, 0x67, 0xf5, 0x1f, 0x38, 0xfa,
	0xfe, 0xce, 0x52, 0x02, 0x67, 0xa0, 0x65, 0xaf, 0x62, 0x99, 0xce, 0xa8, 0x89, 0x22, 0x23, 0x68,
	0x45, 0x2c, 0x8f, 0xbd, 0x33, 0x57, 0x24, 0x45, 0x71, 0x99, 0x5d, 0x45, 0x9f, 0x47, 0xd7, 0xf8,
	0xbc, 0x43, 0xf1, 0x89, 0xd2, 0x2a, 0xb3, 0x66, 0xb4, 0x88, 0x91, 0xcf, 0xb0, 0x1b, 0xb0, 0x74,
	0xcc, 0x02, 0xee, 0x7a, 0x22, 0x8a, 0xb8, 0x57, 0xc0, 0x6e, 0x22, 0xa2, 0xd0, 0x9b, 0xd9, 0x1b,
	0x9d, 0x52, 0xcf, 0xea, 0x77, 0x8c, 0xf9, 0x1b, 0xa5, 0x1c, 0x1a, 0xe1, 0x08, 0x75, 0x74, 0x27,
	0x58, 0x4f, 0x90, 0xa7, 0xb0, 0x3d, 0x8e, 0x84, 0x77, 0xee, 0x66, 0x52, 0xa4, 0x45, 0x8e, 0x24,
	0xe5, 0x93, 0xf0, 0xc2, 0xde, 0xec, 0x94, 0x7a, 0x75, 0x4a, 0x90, 0xfb, 0xa0, 0xa8, 0x11, 0x32,
	0x6d, 0x0a, 0xcd, 0xa5, 0xe2, 0xc9, 0xff, 0x50, 0x39, 0xe7, 0x33, 0xdd, 0xec, 0xe2, 0x48, 0x1e,
	0xc3, 0xc6, 0x57, 0x16, 0xe5, 0x1c, 0x9b, 0x6c, 0xf5, 0x6f, 0x9a, 0xeb, 0xa9, 0x40, 0x55, 0x3a,
	0x55, 0x9a, 0x67, 0xe5, 0xc3, 0x52, 0xfb, 0x23, 0x90, 0xd5, 0x46, 0xac, 0x31, 0x7e, 0xb2, 0x6c,
	0x7c, 0xcb, 0x18, 0x2f, 0x45, 0x2f, 0x38, 0x77, 0xbf, 0x95, 0x60, 0xe7, 0x9a, 0xa6, 0x90, 0xb7,
	0x40, 0x52, 0x2e, 0x79, 0x8c, 0x0d, 0x9d, 0x4f, 0x23, 0xa6, 0xb3, 0xfa, 0xbb, 0x8e, 0x1a, 0x47,
	0x67, 0x3e, 0x8e, 0xce, 0x4b, 0x2d, 0xa0, 0x37, 0x4c, 0xd0, 0x1c, 0x22, 0xfb, 0xb0, 0x95, 0x72,
	0xc9, 0xc2, 0x98, 0xfb, 0xee, 0x38, 0x0f, 0x23, 0x3f, 0xc3, 0x1b, 0x56, 0x69, 0x6b, 0x0e, 0x0f,
	0x10, 0xed, 0x52, 0x68, 0x2e, 0x5d, 0x95, 0xec, 0x01, 0xf0, 0x0b, 0xee, 0xe5, 0x92, 0x8d, 0x23,
	0x8e, 0xb9, 0xeb, 0x74, 0x01, 0x21, 0xf7, 0xa0, 0xa1, 0xe7, 0x69, 0x12, 0xb1, 0xa0, 0xb0, 0xad,
	0xf4, 0xea, 0xd4, 0x52, 0xd8, 0xeb, 0x02, 0xea, 0xfe, 0x2c, 0x43, 0x63, 0xb1, 0xb1, 0xe4, 0x0e,
	0x40, 0xa2, 0x86, 0xcc, 0x35, 0x8f, 0xa0, 0xae, 0x91, 0x23, 0x5f, 0xbf, 0x8d, 0xb2, 0x79, 0x1b,
	0x04, 0xaa, 0x31, 0x9b, 0x72, 0xbb, 0x82, 0xc9, 0xf1, 0x5c, 0xa4, 0xf5, 0xc3, 0x2c, 0x89, 0xd8,
	0xcc, 0x45, 0xae, 0x8a, 0x9c, 0xa5, 0xb1, 0xf7, 0x85, 0xe4, 0x64, 0x65, 0xd2, 0x37, 0x70, 0xd2,
	0x7b, 0x6b, 0xff, 0xf6, 0xdf, 0x07, 0xfd, 0x1f, 0x0e, 0xc1, 0xaf, 0x32, 0x00, 0xfe, 0x80, 0x11,
	0xae, 0xa4, 0xcb, 0xe5, 0xd0, 0xc0, 0x06, 0xf4, 0xa1, 0x36, 0x5f, 0x28, 0x2b, 0x9e, 0xc7, 0x9a,
	0xc0, 0x48, 0x6a, 0x74, 0xe4, 0x10, 0x6a, 0x53, 0x2e, 0x59, 0xb1, 0xe8, 0xb0, 0x71, 0x56, 0xff,
	0xf6, 0x65, 0xdd, 0x26, 0x95, 0x73, 0xac, 0x35, 0xd4, 0xa8, 0xc9, 0xf3, 0x35, 0x1b, 0xe2, 0x4f,
	0x75, 0x5c, 0xe9, 0xd2, 0x8f, 0x12, 0xd4, 0xe6, 0xae, 0xe4, 0x3e, 0x34, 0x33, 0x91, 0xa7, 0x5e,
	0xb1, 0x1a, 0xa6, 0xd3, 0x50, 0xea, 0xa2, 0x1a, 0x0a, 0x1c, 0x22, 0x46, 0x86, 0xb0, 0x85, 0x33,
	0xe9, 0x9a, 0x85, 0xaa, 0xab, 0x6c, 0xaf, 0xcc, 0xf8, 0xe9, 0x5c, 0x41, 0x5b, 0x18, 0x62, 0xbe,
	0xc9, 0x3e, 0x6c, 0x4a, 0x96, 0x06, 0x5c, 0x62, 0xb5, 0xad, 0xfe, 0x96, 0xb9, 0xed, 0x29, 0xc2,
	0x54, 0xd3, 0x5d, 0x0b, 0xea, 0x83, 0x62, 0x69, 0x1c, 0xc5, 0x13, 0x31, 0xb0, 0x3e, 0xd5, 0xcd,
	0xd2, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xed, 0x88, 0xa3, 0x0d, 0x20, 0x06, 0x00, 0x00,
}
